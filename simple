/*
2017_12_19
make simple
mapping
*/


#include "opencv2/calib3d/calib3d.hpp"
#include "opencv2/imgproc/imgproc.hpp"
#include "opencv2/core/core.hpp"
#include "opencv2/highgui/highgui.hpp"

#include <iostream>

using namespace std;
using namespace cv;


std::vector<cv::Point2f> Generate2DPoints();
std::vector<cv::Point3f> Generate3DPoints();
cv::Mat cameraMatrix(3, 3, cv::DataType<double>::type);
cv::Mat distCoeffs(4, 1, cv::DataType<double>::type);
cv::Mat rvec(3, 1, cv::DataType<double>::type);
cv::Mat tvec(3, 1, cv::DataType<double>::type);
std::vector<cv::Point2f> imagePoints = Generate2DPoints();
std::vector<cv::Point3f> objectPoints = Generate3DPoints();

void initial();

int main()
{
	
	initial();
	cv::solvePnP(objectPoints, imagePoints, cameraMatrix, distCoeffs, rvec, tvec);

	// 3D data to 2D image plane Okay.
	std::vector<cv::Point2f> projectedPoints;
	cv::projectPoints(objectPoints, rvec, tvec, cameraMatrix, distCoeffs, projectedPoints);

	for (unsigned int i = 0; i < projectedPoints.size(); ++i)
	{
		// 실제 image point 와 3D로 부터 project 한 2D 이미지 좌표를 비교할 수 있습니다. 그리고 오차 구하기 가능합니다. 
		std::cout << "Image point: " << imagePoints[i] << " Projected to " << projectedPoints[i] << std::endl;
	}

	return 0;
}

std::vector<cv::Point2f> Generate2DPoints()
{
	std::vector<cv::Point2f> points;

	float x, y;

	x = 308; y = 139;
	points.push_back(cv::Point2f(x, y));
	x = 290; y = 414;
	points.push_back(cv::Point2f(x, y));
	x = 450; y = 123;
	points.push_back(cv::Point2f(x, y));
	x = 455; y = 410;
	points.push_back(cv::Point2f(x, y));
	x = 664; y = 91;
	points.push_back(cv::Point2f(x, y));
	x = 668; y = 408;
	points.push_back(cv::Point2f(x, y));

	for (unsigned int i = 0; i < points.size(); ++i)
	{
		std::cout << points[i] << std::endl;
	}

	return points;
}

std::vector<cv::Point3f> Generate3DPoints()
{
	std::vector<cv::Point3f> points;

	float x, y, z;

	x = 40; y = 31; z = 9;
	points.push_back(cv::Point3f(x, y, z));
	x = 40; y = 31; z = 0.5;
	points.push_back(cv::Point3f(x, y, z));
	x = 63; y = 27; z = 16;
	points.push_back(cv::Point3f(x, y, z));
	x = 63; y = 27; z = 0;
	points.push_back(cv::Point3f(x, y, z));
	x = 58; y = 17.5; z = 16;
	points.push_back(cv::Point3f(x, y, z));
	x = 58; y = 17.5; z = 0;
	points.push_back(cv::Point3f(x, y, z));

	for (unsigned int i = 0; i < points.size(); ++i)
	{
		std::cout << points[i] << std::endl;
	}
	return points;
}

void initial() {

	//Gopro parameter
	cameraMatrix.at<double>(0, 0) = 1250.978;   // fx
	cameraMatrix.at<double>(0, 1) = 0;
	cameraMatrix.at<double>(0, 2) = 626.673;    // cx

	cameraMatrix.at<double>(1, 0) = 0;
	cameraMatrix.at<double>(1, 1) = 1257.900;    // fy
	cameraMatrix.at<double>(1, 2) = 354.239;     // cy

	cameraMatrix.at<double>(2, 0) = 0;
	cameraMatrix.at<double>(2, 1) = 0;
	cameraMatrix.at<double>(2, 2) = 1;

	cout << "cameraMatrix" << endl;
	cout << cameraMatrix << endl;

	distCoeffs.at<double>(0) = -0.318184;
	distCoeffs.at<double>(1) = 1.125858;
	distCoeffs.at<double>(2) = 0.004153;
	distCoeffs.at<double>(3) = -0.005453;
}
