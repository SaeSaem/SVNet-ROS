/*
이제 이 소스를 우분투로 옮기고, 퍼프블리 하는 것에 연계하면 됩니다. 
그것을 getRT() 내에서 objectPoint2 = read_pcd(); 부분을 수정하면 됩니다.
read_pcd()가 현재 pcd.file 을 불러와서 cloud 데이터를 접근하고 있는데,
이것을 실시간으로 접근하도록 합니다. 

*/

#include <iostream>
#include <pcl/io/pcd_io.h>
#include <pcl/point_types.h>

#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include "opencv2/calib3d/calib3d.hpp"
#include "opencv2/imgproc/imgproc.hpp"

using namespace cv;
using namespace std;

vector<Point3f> read_pcd();
vector<Point2f> get2Dpoint();
void param_init();
void display_image(Mat image);

// global variables
Mat cameraMatrix(3, 3, DataType<double>::type);
Mat distCoeffs(4, 1, DataType<double>::type);
Mat rvec(3, 1, DataType<double>::type);
Mat tvec(3, 1, DataType<double>::type);
Mat image;
vector<Point2f> save2Dpoint;

int main() {

	param_init();
	save2Dpoint = get2Dpoint(); // 2Dpoint from 3D point
	display_image(image);

	return 0;
}

void param_init() {
	cameraMatrix.at<double>(0, 0) = 1250.978;   // fx
	cameraMatrix.at<double>(0, 1) = 0;
	cameraMatrix.at<double>(0, 2) = 626.673;    // cx

	cameraMatrix.at<double>(1, 0) = 0;
	cameraMatrix.at<double>(1, 1) = 1257.900;    // fy
	cameraMatrix.at<double>(1, 2) = 354.239;     // cy

	cameraMatrix.at<double>(2, 0) = 0;
	cameraMatrix.at<double>(2, 1) = 0;
	cameraMatrix.at<double>(2, 2) = 1;

	distCoeffs.at<double>(0) = -0.318184;
	distCoeffs.at<double>(1) = 1.125858;
	distCoeffs.at<double>(2) = 0.004153;
	distCoeffs.at<double>(3) = -0.005453;

	rvec.at<double>(0) = 1.300390386513138;
	rvec.at<double>(1) = -1.095557374421685;
	rvec.at<double>(2) = 1.171722002793529;

	tvec.at<double>(0) = -17.74415636162148;
	tvec.at<double>(1) = -0.9163904987566065;
	tvec.at<double>(2) = -5.427465320880245;
}
vector<Point2f> get2Dpoint() {
	
	std::vector<cv::Point3f> objectPoints2 = read_pcd();
	std::vector<cv::Point2f> projectedPoints2;
	cv::projectPoints(objectPoints2, rvec, tvec, cameraMatrix, distCoeffs, projectedPoints2);

	return projectedPoints2;
}

void display_image(Mat image) {

	image = imread("result.jpg", CV_LOAD_IMAGE_COLOR);  
	if (!image.data)  // Check for invalid input
	{
		cout << "Could not open or find the image" << std::endl;
		return;
	}

	int x, y;
	for (int i = 0; i < save2Dpoint.size(); i++) {
		x = save2Dpoint[i].x;
		y = save2Dpoint[i].y;
		circle(image, Point(x, y), 1, Scalar(0, 0, 255), 2);
		
	}

	namedWindow("window", CV_WINDOW_AUTOSIZE); // Create a window for display.
	imshow("window", image); // Show our image inside it.

	cout << "image size: " << image.rows << " x " << image.cols << endl;

	waitKey(0);
	return;
}

std::vector<cv::Point3f> read_pcd()
{
	std::vector<cv::Point3f> points2;
	pcl::PointCloud<pcl::PointXYZ>::Ptr cloud(new pcl::PointCloud<pcl::PointXYZ>);

	if (pcl::io::loadPCDFile<pcl::PointXYZ>("filter.pcd", *cloud) == -1) //* load the file
	{
		PCL_ERROR("Couldn't read file test_pcd.pcd \n");
		return points2;
	}
	std::cout << "Loaded "
		<< cloud->width * cloud->height
		<< " data points from test_pcd.pcd with the following fields: "
		<< std::endl;

	//	std::vector<cv::Point3f> points2;
	int x2, y2, z2;
	for (size_t i = 0; i < cloud->points.size(); ++i) {

		x2 = cloud->points[i].x * 100;
		y2 = cloud->points[i].y * 100;
		z2 = cloud->points[i].z * 100;
		points2.push_back(cv::Point3f(x2, y2, z2));
	}
	cout << points2.size() << endl;
	return points2;
}
